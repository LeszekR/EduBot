<!DOCTYPE html>



















<html class="no-js hasSidebar hasPageActions hasBreadcrumb " lang="en-us" dir="ltr" >

<head>
	<meta charset="utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1.0" />
	<meta property="og:title" content="Enabling Cross-Origin Requests (CORS)" />
	<meta property="og:image" content="https://docs.microsoft.com/_themes/docs.theme/master/en-us/_themes/images/microsoft-header.png" />

	<meta name="twitter:card" content="summary" />
	<meta name="twitter:site" content="@docsmsft" />
	<meta name="twitter:title" content="Enabling Cross-Origin Requests (CORS)" />
	<meta name="twitter:description" content="This document introduces CORS as a standard for allowing or rejecting cross-origin requests in an ASP.NET Core app." />
	<meta name="twitter:image" content="https://docs.microsoft.com/_themes/docs.theme/master/en-us/_themes/images/microsoft-header.png" />
	<meta name="twitter:image:alt" content="Microsoft Logo" />

		<meta name="breadcrumb_path" content="/aspnet/breadcrumb/toc.json" />
<meta name="ms.assetid" content="f9d95e88-4d7e-4d0c-a8e1-47de1128d505" />
<meta name="author" content="Rick-Anderson" />
<meta name="description" content="This document introduces CORS as a standard for allowing or rejecting cross-origin requests in an ASP.NET Core app." />
<meta name="ms.author" content="riande" />
<meta name="manager" content="wpickett" />
<meta name="uid" content="security/cors" />
<meta name="keywords" content="ASP.NET Core,CORS,cross origin" />
<meta name="ms.topic" content="article" />
<meta name="ms.date" content="05/17/2017" />
<meta name="ms.technology" content="aspnet" />
<meta name="ms.prod" content="asp.net-core" />
<meta name="search.ms_sitename" content="Docs" />
<meta name="search.ms_docsetname" content="aspnet-core-conceptual" />
<meta name="version" content="0" />
<meta name="locale" content="en-us" />
<meta name="site_name" content="Docs" />
<meta name="search.ms_product" content="MSDN" />
<meta name="depot_name" content="MSDN.aspnet-core-conceptual" />
<meta name="updated_at" content="2017-11-01 09:17 PM" />
<meta name="gitcommit" content="https://github.com/aspnet/Docs/blob/4c4adff9e833b8faa8620532981b25c0cc52bc27/aspnetcore/security/cors.md" />
<meta name="original_content_git_url" content="https://github.com/aspnet/Docs/blob/live/aspnetcore/security/cors.md" />
<meta name="document_id" content="59bca5db-1196-2a8b-a0d8-4e89b2382288" />
<meta name="document_version_independent_id" content="d3f332c4-4c60-039e-0e1e-bc6b11831f87" />
<meta name="pagetype" content="Conceptual" />
<meta name="toc_rel" content="../toc.json" />
<meta name="pdf_url_template" content="https://docs.microsoft.com/pdfstore/en-us/MSDN.aspnet-core-conceptual/{branchName}{pdfName}" />
<meta name="word_count" content="1671" />

	<meta name="scope" content="ASP.NET Core" />
<link href="https://docs.microsoft.com/en-us/aspnet/core/security/cors" rel="canonical">
	<title>Enabling Cross-Origin Requests (CORS) | Microsoft Docs</title>

	<link rel="stylesheet" href="/_themes/docs.theme/master/en-us/_themes/css/edb57f96cb1c1ff1459e.site.css ">
	<link rel="stylesheet" href="/_themes/docs.theme/master/en-us/_themes/css/edb57f96cb1c1ff1459e.conceptual.css ">

	<script>
	var msDocs = {
		data:{
			contentLocale: 'en-us',
			contentDir: 'ltr',
			userLocale: 'en-us',
			userDir: 'ltr',
			pathToTheme: '/_themes/docs.theme/master/en-us/_themes/',
			pageTemplate: 'Conceptual',
			brand: '',
			hasComments: true,
			feedbackSystem: 'LiveFyre',
			feedbackGitHubRepo: '',
			feedbackGitHubRepoIsPrivate: false,
			feedbackProductUrl: '',
			forceVersionPicker:false		},
		functions:{},
		settings:{
			extendBreadcrumb: false
		}
	};
	if (!('Promise' in window && 'resolve' in window.Promise && 'reject' in window.Promise && 'all' in window.Promise && 'race' in window.Promise)) {
		document.write('<script src="/_themes/docs.theme/master/en-us/_themes/global/js/bluebird.min.js"><\/script>');
	}
	if (typeof fetch !== 'function') {
		document.write('<script src="/_themes/docs.theme/master/en-us/_themes/global/js/fetch.min.js"><\/script>');
	}
	</script>

	<!--[if lt IE 9]>
		<script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-1.12.4.min.js"></script>
		<script src="/_themes/docs.theme/master/en-us/_themes/global/js/polyfills/all.js"></script>
	<![endif]-->
	<!--[if gte IE 9]><!-->
		<script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-2.2.4.min.js"></script>
	<!--<![endif]-->
	<script>window.jQuery || document.write('<script src="/_themes/docs.theme/master/en-us/_themes/global/js/jquery/jquery-1.12.4.min.js"><\/script>')</script>
	<script src="/_themes/docs.theme/master/en-us/_themes/global/js/global.min.js?v=300"></script>
</head>

<body lang="en-us" dir="ltr">
	<div id="headerAreaHolder" ms.pgarea="header" data-bi-name="header">
		<div id="uhfPlaceHolder" class="c-me"></div>
	</div>

	<div class="container mainContainer" ms.pgarea="body" data-bi-name="body">
		<div class="primary-holder">

			<main id="main" role="main" class="content" ms.cmpgrp="content" data-bi-name="content" lang="en-us" dir="ltr">


				<h1 id="enabling-cross-origin-requests-cors" sourcefile="security/cors.md" sourcestartlinenumber="15" sourceendlinenumber="15">Enabling Cross-Origin Requests (CORS)</h1>

					<div class="metadata loading" ms.cmpgrp="page info" data-bi-name="page info">
						<div>
								<time class="date icons" datetime="05/17/2017">05/17/2017</time>
								<span class="length icons">8 minutes to read</span>
								<span class="contributors-text">Contributors</span>
								<ul class="contributors" ms.cmpgrp="contributors" data-bi-name="contributors">
											<li><a href="https://github.com/Rick-Anderson" title="Rick Anderson" ms.cmpnm="contributorprofile" data-bi-name="contributorprofile"><img src="https://docs.microsoft.com/_themes/docs.theme/master/en-us/_themes/images/contributor.svg" data-src="https://github.com/Rick-Anderson.png?size=32" alt="Rick Anderson"></a></li>
											<li><a href="https://github.com/scottaddie" title="Scott Addie" ms.cmpnm="contributorprofile" data-bi-name="contributorprofile"><img src="https://docs.microsoft.com/_themes/docs.theme/master/en-us/_themes/images/contributor.svg" data-src="https://github.com/scottaddie.png?size=32" alt="Scott Addie"></a></li>
											<li><a href="https://github.com/isaac2004" title="Isaac Levin" ms.cmpnm="contributorprofile" data-bi-name="contributorprofile"><img src="https://docs.microsoft.com/_themes/docs.theme/master/en-us/_themes/images/contributor.svg" data-src="https://github.com/isaac2004.png?size=32" alt="Isaac Levin"></a></li>
											<li><a href="https://github.com/xperiandri" title="Andrii Chebukin" ms.cmpnm="contributorprofile" data-bi-name="contributorprofile"><img src="https://docs.microsoft.com/_themes/docs.theme/master/en-us/_themes/images/contributor.svg" data-src="https://github.com/xperiandri.png?size=32" alt="Andrii Chebukin"></a></li>
											<li><a href="https://github.com/testfirstcoder" title="testfirstcoder" ms.cmpnm="contributorprofile" data-bi-name="contributorprofile"><img src="https://docs.microsoft.com/_themes/docs.theme/master/en-us/_themes/images/contributor.svg" data-src="https://github.com/testfirstcoder.png?size=32" alt="testfirstcoder"></a></li>
										<li><a href="https://github.com/aspnet/Docs/blob/master/aspnetcore/security/cors.md" ms.cmpnm="contributorshowall" data-bi-name="contributorshowall">all</a></li>
								</ul>
						</div>


						<nav id="center-doc-outline" class="doc-outline" ms.cmpgrp="intopic toc" data-bi-name="intopic toc" role="navigation" aria-label="On page navigation">
							<h3>In this article</h3>
						</nav>
					</div>

				<!-- <content> -->
					<div>
<p>By <a href="https://github.com/mikewasson" data-linktype="external">Mike Wasson</a>, <a href="https://twitter.com/spboyer" data-linktype="external">Shayne Boyer</a>, and <a href="https://github.com/tdykstra" data-linktype="external">Tom Dykstra</a></p>
<p>Browser security prevents a web page from making AJAX requests to another domain. This restriction is called the <em>same-origin policy</em>, and prevents a malicious site from reading sensitive data from another site. However, sometimes you might want to let other sites make cross-origin requests to your web API.</p>
<p><a href="http://www.w3.org/TR/cors/" data-linktype="external">Cross Origin Resource Sharing</a> (CORS) is a W3C standard that allows a server to relax the same-origin policy. Using CORS, a server can explicitly allow some cross-origin requests while rejecting others. CORS is safer and more flexible than earlier techniques such as <a href="https://wikipedia.org/wiki/JSONP" data-linktype="external">JSONP</a>. This topic shows how to enable CORS in an ASP.NET Core application.</p>
<h2 id="what-is-same-origin">What is &quot;same origin&quot;?</h2>
<p>Two URLs have the same origin if they have identical schemes, hosts, and ports. (<a href="http://tools.ietf.org/html/rfc6454" data-linktype="external">RFC 6454</a>)</p>
<p>These two URLs have the same origin:</p>
<ul>
<li><p><code>http://example.com/foo.html</code></p>
</li>
<li><p><code>http://example.com/bar.html</code></p>
</li>
</ul>
<p>These URLs have different origins than the previous two:</p>
<ul>
<li><p><code>http://example.net</code> - Different domain</p>
</li>
<li><p><code>http://www.example.com/foo.html</code> - Different subdomain</p>
</li>
<li><p><code>https://example.com/foo.html</code> - Different scheme</p>
</li>
<li><p><code>http://example.com:9000/foo.html</code> - Different port</p>
</li>
</ul>
<div class="NOTE"><p>Note</p><p>Internet Explorer does not consider the port when comparing origins.</p>
</div>
<h2 id="setting-up-cors">Setting up CORS</h2>
<p>To set up CORS for your application add the <code>Microsoft.AspNetCore.Cors</code> package to your project.</p>
<p>Add the CORS services in Startup.cs:</p>
<pre><code class="lang-csharp" data-src="https://github.com/aspnet/Docs/blob/live/aspnetcore/security/cors/sample/CorsExample1/Startup.cs" name="Main">public void ConfigureServices(IServiceCollection services)
{
    services.AddCors();
}
</code></pre><h2 id="enabling-cors-with-middleware">Enabling CORS with middleware</h2>
<p>To enable CORS for your entire application add the CORS middleware to your request pipeline using the <code>UseCors</code> extension method. Note that the CORS middleware must precede any defined endpoints in your app that you want to support cross-origin requests (ex. before any call to <code>UseMvc</code>).</p>
<p>You can specify a cross-origin policy when adding the CORS middleware using the <code>CorsPolicyBuilder</code> class. There are two ways to do this. The first is to call UseCors with a lambda:</p>
<pre><code class="lang-csharp" data-src="https://github.com/aspnet/Docs/blob/live/aspnetcore/security/cors/sample/CorsExample1/Startup.cs" name="Main" highlight-lines="11,12">public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)
{
    loggerFactory.AddConsole();

    if (env.IsDevelopment())
    {
        app.UseDeveloperExceptionPage();
    }

    // Shows UseCors with CorsPolicyBuilder.
    app.UseCors(builder =&gt;
       builder.WithOrigins(&quot;http://example.com&quot;));

    app.Run(async (context) =&gt;
    {
        await context.Response.WriteAsync(&quot;Hello World!&quot;);
    });
</code></pre><p><strong>Note:</strong> The URL must be specified without a trailing slash (<code>/</code>). If the URL terminates with <code>/</code>, the comparison will return <code>false</code> and no header will be returned.</p>
<p>The lambda takes a <code>CorsPolicyBuilder</code> object. You&#39;ll find a list of the <a href="#cors-policy-options" data-linktype="self-bookmark">configuration options</a> later in this topic. In this example, the policy allows cross-origin requests from <code>http://example.com</code> and no other origins.</p>
<p>Note that CorsPolicyBuilder has a fluent API, so you can chain method calls:</p>
<pre><code class="lang-csharp" data-src="https://github.com/aspnet/Docs/blob/live/aspnetcore/security/cors/sample/CorsExample3/Startup.cs" name="Main" highlight-lines="3">app.UseCors(builder =&gt;
    builder.WithOrigins(&quot;http://example.com&quot;)
           .AllowAnyHeader()
    );
</code></pre><p>The second approach is to define one or more named CORS policies, and then select the policy by name at run time.</p>
<pre><code class="lang-csharp" data-src="https://github.com/aspnet/Docs/blob/live/aspnetcore/security/cors/sample/CorsExample2/Startup.cs" name="Main">public void ConfigureServices(IServiceCollection services)
{
    services.AddCors(options =&gt;
    {
        options.AddPolicy(&quot;AllowSpecificOrigin&quot;,
            builder =&gt; builder.WithOrigins(&quot;http://example.com&quot;));
    });
}

public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)
{
    loggerFactory.AddConsole();

    if (env.IsDevelopment())
    {
        app.UseDeveloperExceptionPage();
    }

    // Shows UseCors with named policy.
    app.UseCors(&quot;AllowSpecificOrigin&quot;);
    app.Run(async (context) =&gt;
    {
        await context.Response.WriteAsync(&quot;Hello World!&quot;);
    });
}
</code></pre><p>This example adds a CORS policy named &quot;AllowSpecificOrigin&quot;. To select the policy, pass the name to <code>UseCors</code>.</p>
<h2 id="enabling-cors-in-mvc">Enabling CORS in MVC</h2>
<p>You can alternatively use MVC to apply specific CORS per action, per controller, or globally for all controllers. When using MVC to enable CORS the same CORS services are used, but the CORS middleware is not.</p>
<h3 id="per-action">Per action</h3>
<p>To specify a CORS policy for a specific action add the <code>[EnableCors]</code> attribute to the action. Specify the policy name.</p>
<pre><code class="lang-csharp" data-src="https://github.com/aspnet/Docs/blob/live/aspnetcore/security/cors/sample/CorsMVC/Controllers/ValuesController.cs" name="Main">[HttpGet]
[EnableCors(&quot;AllowSpecificOrigin&quot;)]
public IEnumerable&lt;string&gt; Get()
{
    return new string[] { &quot;value1&quot;, &quot;value2&quot; };
}
</code></pre><h3 id="per-controller">Per controller</h3>
<p>To specify the CORS policy for a specific controller add the <code>[EnableCors]</code> attribute to the controller class. Specify the policy name.</p>
<pre><code class="lang-csharp" data-src="https://github.com/aspnet/Docs/blob/live/aspnetcore/security/cors/sample/CorsMVC/Controllers/ValuesController.cs" name="Main">[Route(&quot;api/[controller]&quot;)]
[EnableCors(&quot;AllowSpecificOrigin&quot;)]
public class ValuesController : Controller
</code></pre><h3 id="globally">Globally</h3>
<p>You can enable CORS globally for all controllers by adding the <code>CorsAuthorizationFilterFactory</code> filter to the global filter collection:</p>
<pre><code class="lang-csharp" data-src="https://github.com/aspnet/Docs/blob/live/aspnetcore/security/cors/sample/CorsMVC/Startup2.cs" name="Main">public void ConfigureServices(IServiceCollection services)
{
    services.AddMvc();
    services.Configure&lt;MvcOptions&gt;(options =&gt;
    {
        options.Filters.Add(new CorsAuthorizationFilterFactory(&quot;AllowSpecificOrigin&quot;));
    });
}
</code></pre><p>The precedence order is: Action, controller, global. Action-level policies take precedence over controller-level policies, and controller-level policies take precedence over global policies.</p>
<h3 id="disable-cors">Disable CORS</h3>
<p>To disable CORS for a controller or action, use the <code>[DisableCors]</code> attribute.</p>
<pre><code class="lang-csharp" data-src="https://github.com/aspnet/Docs/blob/live/aspnetcore/security/cors/sample/CorsMVC/Controllers/ValuesController.cs" name="Main">[HttpGet(&quot;{id}&quot;)]
[DisableCors]
public string Get(int id)
{
    return &quot;value&quot;;
}
</code></pre><h2 id="cors-policy-options">CORS policy options</h2>
<p>This section describes the various options that you can set in a CORS policy.</p>
<ul>
<li><p><a href="#set-the-allowed-origins" data-linktype="self-bookmark">Set the allowed origins</a></p>
</li>
<li><p><a href="#set-the-allowed-http-methods" data-linktype="self-bookmark">Set the allowed HTTP methods</a></p>
</li>
<li><p><a href="#set-the-allowed-request-headers" data-linktype="self-bookmark">Set the allowed request headers</a></p>
</li>
<li><p><a href="#set-the-exposed-response-headers" data-linktype="self-bookmark">Set the exposed response headers</a></p>
</li>
<li><p><a href="#credentials-in-cross-origin-requests" data-linktype="self-bookmark">Credentials in cross-origin requests</a></p>
</li>
<li><p><a href="#set-the-preflight-expiration-time" data-linktype="self-bookmark">Set the preflight expiration time</a></p>
</li>
</ul>
<p>For some options it may be helpful to read <a href="#how-cors-works" data-linktype="self-bookmark">How CORS works</a> first.</p>
<h3 id="set-the-allowed-origins">Set the allowed origins</h3>
<p>To allow one or more specific origins:</p>
<pre><code class="lang-csharp" data-src="https://github.com/aspnet/Docs/blob/live/aspnetcore/security/cors/sample/CorsExample4/Startup.cs" name="Main">options.AddPolicy(&quot;AllowSpecificOrigins&quot;,
builder =&gt;
{
    builder.WithOrigins(&quot;http://example.com&quot;, &quot;http://www.contoso.com&quot;);
});
</code></pre><p>To allow all origins:</p>
<pre><code class="lang-csharp" data-src="https://github.com/aspnet/Docs/blob/live/aspnetcore/security/cors/sample/CorsExample4/Startup.cs" name="Main">options.AddPolicy(&quot;AllowAllOrigins&quot;,
    builder =&gt;
    {
        builder.AllowAnyOrigin();
    });
</code></pre><p>Consider carefully before allowing requests from any origin. It means that literally any website can make AJAX calls to your API.</p>
<h3 id="set-the-allowed-http-methods">Set the allowed HTTP methods</h3>
<p>To allow all HTTP methods:</p>
<pre><code class="lang-csharp" data-src="https://github.com/aspnet/Docs/blob/live/aspnetcore/security/cors/sample/CorsExample4/Startup.cs" name="Main">options.AddPolicy(&quot;AllowAllMethods&quot;,
    builder =&gt;
    {
        builder.WithOrigins(&quot;http://example.com&quot;)
               .AllowAnyMethod();
    });
</code></pre><p>This affects pre-flight requests and Access-Control-Allow-Methods header.</p>
<h3 id="set-the-allowed-request-headers">Set the allowed request headers</h3>
<p>A CORS preflight request might include an Access-Control-Request-Headers header, listing the HTTP headers set by the application (the so-called &quot;author request headers&quot;).</p>
<p>To whitelist specific headers:</p>
<pre><code class="lang-csharp" data-src="https://github.com/aspnet/Docs/blob/live/aspnetcore/security/cors/sample/CorsExample4/Startup.cs" name="Main">options.AddPolicy(&quot;AllowHeaders&quot;,
    builder =&gt;
    {
        builder.WithOrigins(&quot;http://example.com&quot;)
               .WithHeaders(&quot;accept&quot;, &quot;content-type&quot;, &quot;origin&quot;, &quot;x-custom-header&quot;);
    });
</code></pre><p>To allow all author request headers:</p>
<pre><code class="lang-csharp" data-src="https://github.com/aspnet/Docs/blob/live/aspnetcore/security/cors/sample/CorsExample4/Startup.cs" name="Main">options.AddPolicy(&quot;AllowAllHeaders&quot;,
    builder =&gt;
    {
        builder.WithOrigins(&quot;http://example.com&quot;)
               .AllowAnyHeader();
    });
</code></pre><p>Browsers are not entirely consistent in how they set Access-Control-Request-Headers. If you set headers to anything other than &quot;*&quot;, you should include at least &quot;accept&quot;, &quot;content-type&quot;, and &quot;origin&quot;, plus any custom headers that you want to support.</p>
<h3 id="set-the-exposed-response-headers">Set the exposed response headers</h3>
<p>By default, the browser does not expose all of the response headers to the application. (See <a href="http://www.w3.org/TR/cors/#simple-response-header" data-linktype="external">http://www.w3.org/TR/cors/#simple-response-header</a>.) The response headers that are available by default are:</p>
<ul>
<li><p>Cache-Control</p>
</li>
<li><p>Content-Language</p>
</li>
<li><p>Content-Type</p>
</li>
<li><p>Expires</p>
</li>
<li><p>Last-Modified</p>
</li>
<li><p>Pragma</p>
</li>
</ul>
<p>The CORS spec calls these <em>simple response headers</em>. To make other headers available to the application:</p>
<pre><code class="lang-csharp" data-src="https://github.com/aspnet/Docs/blob/live/aspnetcore/security/cors/sample/CorsExample4/Startup.cs" name="Main">options.AddPolicy(&quot;ExposeResponseHeaders&quot;,
    builder =&gt;
    {
        builder.WithOrigins(&quot;http://example.com&quot;)
               .WithExposedHeaders(&quot;x-custom-header&quot;);
    });
</code></pre><h3 id="credentials-in-cross-origin-requests">Credentials in cross-origin requests</h3>
<p>Credentials require special handling in a CORS request. By default, the browser does not send any credentials with a cross-origin request. Credentials include cookies as well as HTTP authentication schemes. To send credentials with a cross-origin request, the client must set XMLHttpRequest.withCredentials to true.</p>
<p>Using XMLHttpRequest directly:</p>
<pre><code class="lang-javascript">var xhr = new XMLHttpRequest();
xhr.open(&#39;get&#39;, &#39;http://www.example.com/api/test&#39;);
xhr.withCredentials = true;
</code></pre><p>In jQuery:</p>
<pre><code class="lang-jQuery">$.ajax({
  type: &#39;get&#39;,
  url: &#39;http://www.example.com/home&#39;,
  xhrFields: {
    withCredentials: true
}
</code></pre><p>In addition, the server must allow the credentials. To allow cross-origin credentials:</p>
<pre><code class="lang-csharp" data-src="https://github.com/aspnet/Docs/blob/live/aspnetcore/security/cors/sample/CorsExample4/Startup.cs" name="Main">options.AddPolicy(&quot;AllowCredentials&quot;,
    builder =&gt;
    {
        builder.WithOrigins(&quot;http://example.com&quot;)
               .AllowCredentials();
    });
</code></pre><p>Now the HTTP response will include an Access-Control-Allow-Credentials header, which tells the browser that the server allows credentials for a cross-origin request.</p>
<p>If the browser sends credentials, but the response does not include a valid Access-Control-Allow-Credentials header, the browser will not expose the response to the application, and the AJAX request fails.</p>
<p>Be very careful about allowing cross-origin credentials, because it means a website at another domain can send a logged-in user’s credentials to your app on the user’s behalf, without the user being aware. The CORS spec also states that setting origins to &quot;*&quot; (all origins) is invalid if the Access-Control-Allow-Credentials header is present.</p>
<h3 id="set-the-preflight-expiration-time">Set the preflight expiration time</h3>
<p>The Access-Control-Max-Age header specifies how long the response to the preflight request can be cached. To set this header:</p>
<pre><code class="lang-csharp" data-src="https://github.com/aspnet/Docs/blob/live/aspnetcore/security/cors/sample/CorsExample4/Startup.cs" name="Main">options.AddPolicy(&quot;SetPreflightExpiration&quot;,
    builder =&gt;
    {
        builder.WithOrigins(&quot;http://example.com&quot;)
               .SetPreflightMaxAge(TimeSpan.FromSeconds(2520));
    });
</code></pre><p><a name="cors-how-cors-works"></a></p>
<h2 id="how-cors-works">How CORS works</h2>
<p>This section describes what happens in a CORS request, at the level of the HTTP messages. It’s important to understand how CORS works, so that you can configure your CORS policy correctly, and troubleshoot if things don’t work as you expect.</p>
<p>The CORS specification introduces several new HTTP headers that enable cross-origin requests. If a browser supports CORS, it sets these headers automatically for cross-origin requests; you don’t need to do anything special in your JavaScript code.</p>
<p>Here is an example of a cross-origin request. The &quot;Origin&quot; header gives the domain of the site that is making the request:</p>
<pre><code>GET http://myservice.azurewebsites.net/api/test HTTP/1.1
Referer: http://myclient.azurewebsites.net/
Accept: */*
Accept-Language: en-US
Origin: http://myclient.azurewebsites.net
Accept-Encoding: gzip, deflate
User-Agent: Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; WOW64; Trident/6.0)
Host: myservice.azurewebsites.net
</code></pre><p>If the server allows the request, it sets the Access-Control-Allow-Origin header. The value of this header either matches the Origin header, or is the wildcard value &quot;*&quot;, meaning that any origin is allowed.:</p>
<pre><code>HTTP/1.1 200 OK
Cache-Control: no-cache
Pragma: no-cache
Content-Type: text/plain; charset=utf-8
Access-Control-Allow-Origin: http://myclient.azurewebsites.net
Date: Wed, 20 May 2015 06:27:30 GMT
Content-Length: 12

Test message
</code></pre><p>If the response does not include the Access-Control-Allow-Origin header, the AJAX request fails. Specifically, the browser disallows the request. Even if the server returns a successful response, the browser does not make the response available to the client application.</p>
<h3 id="preflight-requests">Preflight Requests</h3>
<p>For some CORS requests, the browser sends an additional request, called a &quot;preflight request&quot;, before it sends the actual request for the resource. The browser can skip the preflight request if the following conditions are true:</p>
<ul>
<li><p>The request method is GET, HEAD, or POST, and</p>
</li>
<li><p>The application does not set any request headers other than Accept, Accept-Language, Content-Language, Content-Type, or Last-Event-ID, and</p>
</li>
<li><p>The Content-Type header (if set) is one of the following:</p>
<ul>
<li><p>application/x-www-form-urlencoded</p>
</li>
<li><p>multipart/form-data</p>
</li>
<li><p>text/plain</p>
</li>
</ul>
</li>
</ul>
<p>The rule about request headers applies to headers that the application sets by calling setRequestHeader on the XMLHttpRequest object. (The CORS specification calls these &quot;author request headers&quot;.) The rule does not apply to headers the browser can set, such as User-Agent, Host, or Content-Length.</p>
<p>Here is an example of a preflight request:</p>
<pre><code>OPTIONS http://myservice.azurewebsites.net/api/test HTTP/1.1
Accept: */*
Origin: http://myclient.azurewebsites.net
Access-Control-Request-Method: PUT
Access-Control-Request-Headers: accept, x-my-custom-header
Accept-Encoding: gzip, deflate
User-Agent: Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; WOW64; Trident/6.0)
Host: myservice.azurewebsites.net
Content-Length: 0
</code></pre><p>The pre-flight request uses the HTTP OPTIONS method. It includes two special headers:</p>
<ul>
<li><p>Access-Control-Request-Method: The HTTP method that will be used for the actual request.</p>
</li>
<li><p>Access-Control-Request-Headers: A list of request headers that the application set on the actual request. (Again, this does not include headers that the browser sets.)</p>
</li>
</ul>
<p>Here is an example response, assuming that the server allows the request:</p>
<pre><code>HTTP/1.1 200 OK
Cache-Control: no-cache
Pragma: no-cache
Content-Length: 0
Access-Control-Allow-Origin: http://myclient.azurewebsites.net
Access-Control-Allow-Headers: x-my-custom-header
Access-Control-Allow-Methods: PUT
Date: Wed, 20 May 2015 06:33:22 GMT
</code></pre><p>The response includes an Access-Control-Allow-Methods header that lists the allowed methods, and optionally an Access-Control-Allow-Headers header, which lists the allowed headers. If the preflight request succeeds, the browser sends the actual request, as described earlier.</p>
</div>
				<!-- </content> -->


			</main>


					<div id="comments-container" ms.cmpgrp="comments" data-bi-name="comments" role="form"></div>
		</div>

		<div class="pageActions">
			<div id="page-actions" ms.cmpgrp="pageactions" data-bi-name="pageactions" role="complementary">
				<div id="page-actions-content">
					<ul class="action-list">
							<li>
									<a href="#comments-container" id="comments-link" ms.cmpnm="comments" data-bi-name="comments">
										<i class="docon docon-comment-lines" aria-hidden="true"></i>Feedback									</a>
							</li>
									<li id="contenteditbtn">
										<a href="https://github.com/aspnet/Docs/blob/master/aspnetcore/security/cors.md" title="Edit This Document" ms.cmpnm="edit" data-bi-name="edit">
											<i class="icon icon-editor"></i>Edit										</a>
										<div class="flyout">
											<a href="#" class="flyout-button" title="Note" ms.cmpnm="contributorGuide" data-bi-name="contributorGuide">
												<i class="icon icon-information"></i>
											</a>
											<div class="flyout-container"><p><a href="//docs.microsoft.com/contribute">How to contribute</a></p></div>
										</div>
									</li>
						<li>
							<div class="flyout">
								<a href="#" class="flyout-button" title="Share This Document" ms.cmpnm="share" data-bi-name="share"><i class="icon icon-share"></i>Share</a>
								<div class="flyout-container">
										<div><a href="" class="share-twitter" ms.cmpnm="twitter" data-bi-name="twitter"><i class="icon icon-twitter"></i>Twitter</a></div>
										<div><a href="" class="share-linkedin" ms.cmpnm="share-linkedin" data-bi-name="linkedin"><i class="icon icon-linkedin"></i>LinkedIn</a></div>
										<div><a href="" class="share-facebook" ms.cmpnm="facebook" data-bi-name="facebook"><i class="icon icon-facebook"></i>Facebook</a></div>
										<div><a href="" class="share-email" ms.cmpnm="email" data-bi-name="email"><i class="icon icon-email"></i>Email</a></div>
								</div>
							</div>
						</li>
						<li class="typeSep">|</li>
						<li>
							<label for="theme-selector">Theme</label>
							<select id="theme-selector" data-bi-name="select-theme">
								<option value="" class="removedOnload"></option>
								<option value="">Light</option>
								<option value="theme_night">Dark</option>
							</select>
						</li>
					</ul>

					<nav id="side-doc-outline" class="doc-outline" ms.cmpnm="intopic toc" data-bi-name="intopic toc" role="navigation" aria-label="On page navigation">
						<h3>In this article</h3>
					</nav>

				</div>
			</div>
		</div>

		<ul class="breadcrumbs" ms.cmpgrp="breadcrumb" data-bi-name="breadcrumb" itemscope itemtype="http://schema.org/BreadcrumbList" role="navigation" aria-label="Breadcrumb"><li></li></ul>

		<div class="sidebar" id="sidebar" ms.cmpgrp="left toc" data-bi-name="left toc" role="navigation" aria-label="Main Navigation">
			<div id="sidebarContent">
				<div class="filterHolder">
				</div>
				<nav class="toc"></nav>
				<div class="pdfDownloadHolder"></div>
			</div>
			<div class="tocSpace"></div>
		</div>

		<div id="menu-nav" class="dropdown-container">
			<div class="dropdown dropdown-full mobilenavi">
					<select>
					</select>
			</div>
		</div>

	</div>

	<div id="openFeedbackContainer" class="openfeedback-container"></div>

	<div class="container footerContainer" >
<footer id="footer" ms.pgarea="footer" data-bi-name="footer" class="footer-layout">
  <div class="container" role="contentinfo">

    <a data-mscc-ic="false" id="locale-selector-link" href="#" data-bi-name="select-locale" ms.cmpnm="select-locale"></a>

    <ul class="links" ms.cmpgrp="footerlinks" data-bi-name="footerlinks">
		<li><a data-mscc-ic="false" href="https://docs.microsoft.com/teamblog" ms.cmpnm="bloglink" data-bi-name="bloglink">Blog</a></li>
		<li><a data-mscc-ic="false" href="//docs.microsoft.com/contribute" ms.cmpnm="contributorGuide" data-bi-name="contributorGuide">How to contribute</a></li>
		<li><a data-mscc-ic="false" href="//privacy.microsoft.com/en-us/" ms.cmpnm="privacy" data-bi-name="privacy">Privacy &amp; Cookies</a></li>
		<li><a data-mscc-ic="false" href="/en-us/legal/termsofuse" ms.cmpnm="termsofuse" data-bi-name="termsofuse">Terms of Use</a></li>
		<li><a data-mscc-ic="false" href="//aka.ms/sitefeedback" ms.cmpnm="feedback" data-bi-name="feedback">Feedback</a></li>
		<li><a data-mscc-ic="false" href="https://www.microsoft.com/en-us/legal/intellectualproperty/Trademarks/EN-US.aspx" ms.cmpnm="trademarks" data-bi-name="trademarks">Trademarks</a></li>
    </ul>
  </div>
</footer>	</div>

	<script src="/_themes/docs.theme/master/en-us/_themes/javascript/edb57f96cb1c1ff1459e.conceptual.js"></script>
</body>
</html>